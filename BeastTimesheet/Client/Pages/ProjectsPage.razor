@page "/"
@page "/projects"
@using BeastTimesheet.Shared.Model
@using BeastTimesheet.DesignSystem
@using static BeastTimesheet.Shared.Config
@inject HttpClient http
@inject NavigationManager nav

<PageTitle>Projects</PageTitle>

<MainTemplate>
    <Header>Projects</Header>
    <Actions>
        <AsyncButton OnClick="Create" State="creatingState">
            <ButtonText>Create project</ButtonText>
            <LoadingText>Creating...</LoadingText>
            <ErrorText>Creating failed!</ErrorText>
        </AsyncButton>
    </Actions>
    <Main>
        <AsyncResource State="loadingState" IsPage>
            <ResourceContent>
                <ListView Items="projects" Context="project">
                    <ItemTemplate>
                        <NavLink href="@($"projects/{project.Id}")">
                            #@project.Id - @(project.Name is "" ? "Draft" : project.Name)
                        </NavLink>
                    </ItemTemplate>
                    <EmptyContent>
                        <p>Nothing to show here.</p>
                        <AsyncButton OnClick="Create" State="creatingState">
                            <ButtonText>Create project</ButtonText>
                            <LoadingText>Creating...</LoadingText>
                            <ErrorText>Creating failed!</ErrorText>
                        </AsyncButton>
                    </EmptyContent>
                </ListView>
            </ResourceContent>
            <LoadingText>Loading projects...</LoadingText>
            <ErrorText>Loading projects failed!</ErrorText>
        </AsyncResource>
    </Main>
</MainTemplate>

@code {
    IEnumerable<Project>? projects;
    AsyncResourceState loadingState;
    AsyncButtonState creatingState;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await http.GetFromJsonAsync<IEnumerable<Project>>("api/Project", JSON_OPTIONS);
            loadingState = AsyncResourceState.Success;
        }
        catch
        {
            loadingState = AsyncResourceState.Error;
        }
    }

    async Task Create()
    {
        creatingState = AsyncButtonState.Loading;

        try
        {
            var res = await http.PostAsJsonAsync("api/Project", new Project());
            var project = await res.Content.ReadFromJsonAsync<Project>();
            nav.NavigateTo($"projects/{project!.Id}");
        }
        catch
        {
            creatingState = AsyncButtonState.Error;
        }
    }
}

