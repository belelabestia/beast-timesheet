@using BeastTimesheet.DesignSystem
@using BeastTimesheet.Shared.Model
@using static BeastTimesheet.Shared.Config
@page "/timesheets/{id:int}"
@inject HttpClient http
@inject NavigationManager nav

<PageTitle>Timesheet</PageTitle>

<Overlay Show="@showTimesheets">
    <AsyncResource State="loadingProjectState" IsPage="false">
        <ResourceContent>
            <div class="flex column gap">
                @if (projectTimesheets!.Any())
                {
                    <div class="flex end divide">
                        <button @onclick="CloseTimesheetSelection">Cancel</button>
                    </div>
                }
                <ListView Items="projectTimesheets" Context="projectTimesheet">
                    <ItemTemplate>
                        <div class="flex gap">
                            <AsyncButton OnClick="MoveToTimesheet(projectTimesheet)" State="movingSessionsState"
                                Disabled="disableButtons">
                                <ButtonText>Move</ButtonText>
                                <LoadingText>Moving...</LoadingText>
                                <ErrorText>Moving failed!</ErrorText>
                            </AsyncButton>
                            <span href="@($"timesheets/{projectTimesheet.Id}")">#@projectTimesheet.Id -
                                @(projectTimesheet.Name
                                    is
                                    "" ?
                                    "Draft" : projectTimesheet.Name)
                            </span>
                        </div>
                    </ItemTemplate>
                    <EmptyContent>
                        <p>Nothing to show here.</p>
                        <button @onclick="CloseTimesheetSelection">Close</button>
                    </EmptyContent>
                </ListView>
            </div>
        </ResourceContent>
        <LoadingText>Loading project timesheets...</LoadingText>
    </AsyncResource>
</Overlay>

<MainTemplate>
    <Header>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <EntityName Id="@id" Name="@timesheet!.Name" />
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Header>
    <Actions>
        <AsyncButton OnClick="Save" State="savingState" Disabled="disableButtons">
            <ButtonText>Save</ButtonText>
            <LoadingText>Saving...</LoadingText>
            <ErrorText>Saving failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="Delete" State="deletingState" Disabled="disableButtons">
            <ButtonText>Delete</ButtonText>
            <LoadingText>Deleting...</LoadingText>
            <ErrorText>Deleting failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="AddSession" State="addingSessionState" Disabled="disableButtons">
            <ButtonText>Add session</ButtonText>
            <LoadingText>Adding session...</LoadingText>
            <ErrorText>Adding session failed!</ErrorText>
        </AsyncButton>
        @if (timesheet?.Bill is null)
        {
            <AsyncButton OnClick="CreateBill" State="creatingBillState" Disabled="disableButtons">
                <ButtonText>Create bill</ButtonText>
                <LoadingText>Creating bill...</LoadingText>
                <ErrorText>Creating bill failed!</ErrorText>
            </AsyncButton>
        }
        else
        {
            <AsyncButton OnClick="DeleteBill" State="deletingBillState" Disabled="disableButtons">
                <ButtonText>Delete bill</ButtonText>
                <LoadingText>Deleting bill...</LoadingText>
                <ErrorText>Deleting bill failed!</ErrorText>
            </AsyncButton>
        }
        <button @onclick="Cancel" disabled="@disableButtons">Cancel</button>
    </Actions>
    <Links>
        <NavLink href="projects">Projects</NavLink>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <NavLink href="@($"projects/{timesheet?.ProjectId}")">
                    <EntityName Id="@timesheet!.ProjectId" Name="@timesheet?.Project?.Name" />
                </NavLink>
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Links>
    <Main>
        <AsyncResource State="loadingState" IsPage>
            <ResourceContent>
                <h2 class="pad center">Timesheet data</h2>
                <div class="flex column gap">
                    <label for="name">Name</label>
                    <input id="name" @bind="timesheet!.Name">
                    <label for="state">State</label>
                    <select id="state" @bind="timesheet!.State">
                        <option value="@TimesheetState.Open">Open</option>
                        <option value="@TimesheetState.Closed">Closed</option>
                    </select>
                </div>
                <h2 class="pad center">Bill data</h2>
                <NullableView Item="@timesheet?.Bill" Context="bill">
                    <ItemTemplate>
                        <div class="flex column gap">
                            <label for="expiration-date">Expiration date</label>
                            <input id="expiration-date" type="date" @bind="bill!.ExpirationDate">
                            <label for="payed">Payed</label>
                            <input id="payed" type="checkbox" @bind="bill.Payed">
                            <div class="grid row gap">
                                <div class="grid gap">
                                    <label>Expired</label>
                                    @if (bill.Expired)
                                    {
                                        <p class="center">&check;</p>
                                    }
                                    else
                                    {
                                        <p class="center">&cross;</p>
                                    }
                                </div>
                                <div class="grid gap">
                                    <label>Total time</label>
                                    <p>@((int)bill.TotalTime.TotalHours) h @bill.TotalTime.Minutes m</p>
                                </div>
                                <div class="grid gap">
                                    <label>Total fee</label>
                                    <p>@(bill.TotalFee is 0 ? "0.00" : string.Format("{0:.00}", bill.TotalFee)) €</p>
                                </div>
                            </div>
                        </div>
                    </ItemTemplate>
                    <EmptyContent>
                        <p>Nothing to show here.</p>
                        <AsyncButton OnClick="CreateBill" State="creatingBillState" Disabled="disableButtons">
                            <ButtonText>Create bill</ButtonText>
                            <LoadingText>Creating bill...</LoadingText>
                            <ErrorText>Creating bill failed!</ErrorText>
                        </AsyncButton>
                    </EmptyContent>
                </NullableView>
                <h2 class="pad center">Sessions</h2>
                <div class="flex end divide">
                    @if (selectionEnabled)
                    {
                        <button @onclick="DisableSelection">Close selection</button>
                    }
                    else
                    {
                        <button @onclick="EnableSelection">Select</button>
                    }
                </div>
                @if (selectionEnabled && selectedSessions is not null && selectedSessions.Any())
                {
                    <div class="flex end divide">
                        <button @onclick="MoveSelectedSessions">Move</button>
                        <button @onclick="selectedSessions.Clear">Clear</button>
                    </div>
                }
                <AsyncResource State="loadingState">
                    <ResourceContent>
                        <ListView Items="timesheet?.Sessions" Context="session">
                            <ItemTemplate>
                                <div class="flex gap">
                                    @if (selectionEnabled)
                                    {
                                        <div class="grid center" style="width: 35px">
                                            <input type="checkbox" @bind:get="selectedSessions.Contains(session)"
                                            @bind:set="OnSelectionChange(session)">
                                        </div>
                                    }
                                    <NavLink href="@($"sessions/{session.Id}")">
                                        <div>
                                            <p>@session.Date</p>
                                            <p>
                                                @session.StartTime - @session.StopTime
                                                (
                                                <TimeView Time="@TimeOnly.FromTimeSpan(session.NetTime)" />) -
                                                @String.Format("{0:.00}", session.SessionFee) €
                                            </p>
                                            <p>
                                                <EntityName Id="@session.Id"
                                                    Name="@(session.Note.Split(Environment.NewLine).FirstOrDefault() ?? "")" />
                                            </p>
                                        </div>
                                    </NavLink>
                                </div>
                            </ItemTemplate>
                            <EmptyContent>
                                <p>Nothing to show here.</p>
                                <AsyncButton OnClick="AddSession" State="addingSessionState" Disabled="disableButtons">
                                    <ButtonText>Create session</ButtonText>
                                    <LoadingText>Creating session...</LoadingText>
                                    <ErrorText>Creating session failed!</ErrorText>
                                </AsyncButton>
                            </EmptyContent>
                        </ListView>
                    </ResourceContent>
                    <LoadingText>Loading sessions...</LoadingText>
                    <ErrorText>Loading sessions failed!</ErrorText>
                </AsyncResource>
            </ResourceContent>
            <LoadingText>Loading timesheet...</LoadingText>
            <ErrorText>Loading timesheet failed!</ErrorText>
        </AsyncResource>
    </Main>
</MainTemplate>

@code {
    Timesheet? timesheet;
    IEnumerable<Timesheet>? projectTimesheets;
    AsyncResourceState loadingState;
    AsyncResourceState loadingProjectState;
    AsyncButtonState savingState;
    AsyncButtonState deletingState;
    AsyncButtonState addingSessionState;
    AsyncButtonState creatingBillState;
    AsyncButtonState deletingBillState;
    AsyncButtonState movingSessionsState;
    bool selectionEnabled;
    bool showTimesheets;
    List<Session> selectedSessions = new();

    bool disableButtons =>
    savingState
    .Merge(deletingState)
    .Merge(addingSessionState)
    .Merge(creatingBillState)
    .Merge(deletingBillState)
    .Merge(movingSessionsState) is not AsyncButtonState.Ready
    || loadingState is not AsyncResourceState.Success;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingState = AsyncResourceState.Loading;

        try
        {
            timesheet = await http.GetFromJsonAsync<Timesheet>($"api/Timesheet/{id}", JSON_OPTIONS);
            loadingState = AsyncResourceState.Success;
        }
        catch
        {
            loadingState = AsyncResourceState.Error;
        }
    }

    void EnableSelection() => selectionEnabled = true;

    void DisableSelection()
    {
        selectionEnabled = false;
        selectedSessions.Clear();
    }

    Action<bool> OnSelectionChange(Session session)
    {
        return (e) =>
        {
            if (e is true) selectedSessions.Add(session);
            else selectedSessions.Remove(session);
        };
    }

    async Task MoveSelectedSessions()
    {
        showTimesheets = true;
        await GetProjectTimesheets();
    }

    async Task GetProjectTimesheets()
    {
        try
        {
            var project = await http.GetFromJsonAsync<Project>($"api/Project/{timesheet!.ProjectId}", JSON_OPTIONS);
            projectTimesheets = project!.Timesheets!.Where(ts => ts.Id != timesheet!.Id);
            loadingProjectState = AsyncResourceState.Success;
        }
        catch
        {
            loadingProjectState = AsyncResourceState.Error;
        }
    }

    void CloseTimesheetSelection()
    {
        showTimesheets = false;
    }

    Func<Task> MoveToTimesheet(Timesheet timesheet)
    {
        return async () =>
        {
            movingSessionsState = AsyncButtonState.Loading;

            try
            {
                foreach (var session in selectedSessions)
                {
                    session.Timesheet = null;
                    session.TimesheetId = timesheet.Id;
                    await http.PutAsJsonAsync($"api/Session/{id}", session, JSON_OPTIONS);
                }

                selectedSessions.Clear();
                movingSessionsState = AsyncButtonState.Ready;

                await OnInitializedAsync();
                CloseTimesheetSelection();
            }
            catch
            {
                movingSessionsState = AsyncButtonState.Error;
            }
        };
    }

    async Task Save()
    {
        savingState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Timesheet/{id}", timesheet, JSON_OPTIONS);
            Back();
        }
        catch
        {
            savingState = AsyncButtonState.Error;
        }
    }

    async Task Delete()
    {
        deletingState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Timesheet/{id}");
            Back();
        }
        catch
        {
            deletingState = AsyncButtonState.Error;
        }
    }

    async Task AddSession()
    {
        addingSessionState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Timesheet/{id}", timesheet, JSON_OPTIONS);
            var res = await http.PostAsJsonAsync("api/Session", new Session { TimesheetId = timesheet!.Id });
            var session = await res.Content.ReadFromJsonAsync<Session>();
            nav.NavigateTo($"sessions/{session!.Id}");
        }
        catch
        {
            addingSessionState = AsyncButtonState.Error;
        }
    }

    async Task CreateBill()
    {
        creatingBillState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Timesheet/{id}", timesheet, JSON_OPTIONS);
            await http.PostAsJsonAsync("api/Bill", new Bill { TimesheetId = timesheet!.Id });
            creatingBillState = AsyncButtonState.Ready;
            await OnInitializedAsync();
        }
        catch
        {
            creatingBillState = AsyncButtonState.Error;
        }
    }

    async Task DeleteBill()
    {
        deletingBillState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Bill/{timesheet!.Bill!.Id}");
            deletingBillState = AsyncButtonState.Ready;
            await OnInitializedAsync();
        }
        catch
        {
            deletingBillState = AsyncButtonState.Error;
        }
    }

    void Cancel()
    {
        Back();
    }

    void Back() => nav.NavigateTo($"projects/{timesheet?.ProjectId}");
}
