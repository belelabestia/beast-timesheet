@using BeastTimesheet.DesignSystem
@using BeastTimesheet.Shared.Model
@using static BeastTimesheet.Shared.Config
@page "/sessions/{id:int}"
@inject HttpClient http
@inject NavigationManager nav

<PageTitle>Session</PageTitle>

<MainTemplate>
    <Header>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <EntityName Id="@id" Name="@session?.Note" />
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Header>
    <Actions>
        <AsyncButton OnClick="Save" State="savingState" Disabled="disableButtons">
            <ButtonText>Save</ButtonText>
            <LoadingText>Saving...</LoadingText>
            <ErrorText>Saving failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="Repeat" State="repeatingState" Disabled="disableButtons">
            <ButtonText>Repeat</ButtonText>
            <LoadingText>Repeating...</LoadingText>
            <ErrorText>Repeating failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="Delete" State="deletingState" Disabled="disableButtons">
            <ButtonText>Delete</ButtonText>
            <LoadingText>Deleting...</LoadingText>
            <ErrorText>Deleting failed!</ErrorText>
        </AsyncButton>
        <button @onclick="Cancel" disabled="@disableButtons">Cancel</button>
    </Actions>
    <Links>
        <NavLink href="projects">Projects</NavLink>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <NavLink href="@($"projects/{session?.Timesheet?.ProjectId}")">
                    <EntityName Id="@session!.Timesheet!.ProjectId" Name="@session!.Timesheet!.Project!.Name" />
                </NavLink>
                <NavLink href="@($"timesheets/{session?.TimesheetId}")">
                    <EntityName Id="@session!.TimesheetId" Name="@session!.Timesheet!.Name" />
                </NavLink>
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Links>
    <Main>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <h2 class="pad center">Session data</h2>
                <div class="flex column gap">
                    <label for="date">Date</label>
                    <input id="date" type="date" @bind="session!.Date">
                    <label for="start-time">Start time</label>
                    <input id="start-time" type="time" @bind="session.StartTime">
                    <label for="stop-time">Stop time</label>
                    <input id="stop-time" type="time" @bind="session.StopTime">
                    <label for="breaks-time">Breaks time</label>
                    <input id="breaks-time" type="time" @bind="session.BreaksTime">
                    <label for="description">Note</label>
                    <div class="textarea-container">
                        <textarea id="description" @bind="session.Note"></textarea>
                    </div>
                    <div class="grid row gap">
                        <div class="grid gap">
                            <label>Gross time</label>
                            <p>@session.GrossTime</p>
                        </div>
                        <div class="grid gap">
                            <label>Net time</label>
                            <p>@session.NetTime</p>
                        </div>
                        <div class="grid gap">
                            <label>Session fee</label>
                            <p>@session.SessionFee</p>
                        </div>
                    </div>
                </div>
            </ResourceContent>
            <LoadingText>Loading session...</LoadingText>
            <ErrorText>Loading session failed!</ErrorText>
        </AsyncResource>
    </Main>
</MainTemplate>

@code {
    Session? session;
    AsyncResourceState loadingState;
    AsyncButtonState savingState;
    AsyncButtonState repeatingState;
    AsyncButtonState deletingState;
    bool disableButtons =>
    savingState.Merge(deletingState).Merge(repeatingState).Merge(deletingState) is not AsyncButtonState.Ready
    || loadingState is not AsyncResourceState.Success;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingState = AsyncResourceState.Loading;

        try
        {
            session = await http.GetFromJsonAsync<Session>($"api/Session/{id}", JSON_OPTIONS);
            loadingState = AsyncResourceState.Success;
        }
        catch
        {
            loadingState = AsyncResourceState.Error;
        }
    }

    async Task Save()
    {
        savingState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Session/{id}", session, JSON_OPTIONS);
            Back();
        }
        catch
        {
            savingState = AsyncButtonState.Error;
        }

    }

    async Task Repeat()
    {
        repeatingState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Session/{id}", session, JSON_OPTIONS);

            var res = await http.PostAsJsonAsync("api/Session/", session! with
                {
                    Id = 0,
                    Date = session.Date.AddDays(1),
                    Timesheet = null
                },
            JSON_OPTIONS);

            var repeated = await res.Content.ReadFromJsonAsync<Session>();
            nav.NavigateTo($"sessions/{repeated!.Id}");
        }
        catch
        {
            repeatingState = AsyncButtonState.Error;
            throw;
        }
    }

    async Task Delete()
    {
        deletingState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Session/{id}");
            Back();
        }
        catch
        {
            deletingState = AsyncButtonState.Error;
        }
    }

    void Cancel()
    {
        Back();
    }

    void Back() => nav.NavigateTo($"timesheets/{session?.TimesheetId}");
}
