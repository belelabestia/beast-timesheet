@using BeastTimesheet.DesignSystem
@using BeastTimesheet.Shared.Model
@using static BeastTimesheet.Shared.Config
@page "/timesheets/{id:int}"
@inject HttpClient http
@inject NavigationManager nav

<MainTemplate>
    <Header>
        <AsyncResource State="loadingState">
            <ResourceContent>
                #@(id + " - " + (timesheet?.Name is null or "" ? "Draft" : timesheet!.Name))
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Header>
    <Actions>
        <AsyncButton OnClick="Save" State="savingState" Disabled="disableButtons">
            <ButtonText>Save</ButtonText>
            <LoadingText>Saving...</LoadingText>
            <ErrorText>Saving failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="Delete" State="deletingState" Disabled="disableButtons">
            <ButtonText>Delete</ButtonText>
            <LoadingText>Deleting...</LoadingText>
            <ErrorText>Deleting failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="AddSession" State="addingSessionState" Disabled="disableButtons">
            <ButtonText>Add session</ButtonText>
            <LoadingText>Adding session...</LoadingText>
            <ErrorText>Adding session failed!</ErrorText>
        </AsyncButton>
        @if (timesheet!.Bill is null)
        {
            <AsyncButton OnClick="CreateBill" State="creatingBillState" Disabled="disableButtons">
                <ButtonText>Create bill</ButtonText>
                <LoadingText>Creating bill...</LoadingText>
                <ErrorText>Creating bill failed!</ErrorText>
            </AsyncButton>
        }
        else
        {
            <AsyncButton OnClick="DeleteBill" State="deletingBillState" Disabled="disableButtons">
                <ButtonText>Delete bill</ButtonText>
                <LoadingText>Deleting bill...</LoadingText>
                <ErrorText>Deleting bill failed!</ErrorText>
            </AsyncButton>
        }
        <button @onclick="Cancel" disabled="@disableButtons">Cancel</button>
    </Actions>
    <Links>
        <NavLink href="projects">Projects</NavLink>
        <NavLink href="@($"projects/{timesheet?.ProjectId}")">@timesheet?.Project?.Name</NavLink>
    </Links>
    <Main>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <h2 class="pad center">Timesheet data</h2>
                <div class="flex column gap">
                    <label for="name">Name</label>
                    <input id="name" @bind="timesheet!.Name">
                    <label for="state">State</label>
                    <select id="state" @bind="timesheet!.State">
                        <option value="@TimesheetState.Open">Open</option>
                        <option value="@TimesheetState.Closed">Closed</option>
                    </select>
                </div>
                <h2 class="pad center">Bill data</h2>
                <ListView Items="Bills" Context="bill">
                    <ItemTemplate>
                        <div class="flex column gap">
                            <div class="grid gap">
                                <label>Name</label>
                                <p>@timesheet!.Bill!.Name</p>
                            </div>
                            <label for="expiration-date">Expiration date</label>
                            <input id="expiration-date" type="date" @bind="timesheet!.Bill!.ExpirationDate">
                            <label for="payed">Payed</label>
                            <input id="payed" type="checkbox" @bind="timesheet!.Bill!.Payed">
                            <div class="grid row gap">
                                <div class="grid gap">
                                    <label>Expired</label>
                                    @if (timesheet!.Bill!.Expired)
                                    {
                                        <p class="center">&check;</p>
                                    }
                                    else
                                    {
                                        <p class="center">&cross;</p>
                                    }
                                </div>
                                <div class="grid gap">
                                    <label>Total time</label>
                                    <p>@timesheet!.Bill!.TotalTime</p>
                                </div>
                                <div class="grid gap">
                                    <label>Total fee</label>
                                    <p>@timesheet!.Bill!.TotalFee</p>
                                </div>
                            </div>
                        </div>
                    </ItemTemplate>
                    <EmptyContent>
                        <p>Nothing to show here.</p>
                        <AsyncButton OnClick="CreateBill" State="creatingBillState" Disabled="disableButtons">
                            <ButtonText>Create bill</ButtonText>
                            <LoadingText>Creating bill...</LoadingText>
                            <ErrorText>Creating bill failed!</ErrorText>
                        </AsyncButton>
                    </EmptyContent>
                </ListView>
                <h2 class="pad center">Sessions</h2>
                <AsyncResource State="loadingState">
                    <ResourceContent>
                        <ListView Items="timesheet?.Sessions" Context="session">
                            <ItemTemplate>
                                <NavLink href="@($"sessions/{session.Id}")">
                                    @session.Date -
                                    @(session.Description is not "" ? session.Description : "Draft - #" + session.Id)
                                    (@session.NetTime | @session.SessionFee)
                                </NavLink>
                            </ItemTemplate>
                            <EmptyContent>
                                <p>Nothing to show here.</p>
                                <AsyncButton OnClick="AddSession" State="addingSessionState" Disabled="disableButtons">
                                    <ButtonText>Create session</ButtonText>
                                    <LoadingText>Creating session...</LoadingText>
                                    <ErrorText>Creating session failed!</ErrorText>
                                </AsyncButton>
                            </EmptyContent>
                        </ListView>
                    </ResourceContent>
                    <LoadingText>Loading sessions...</LoadingText>
                    <ErrorText>Loading sessions failed!</ErrorText>
                </AsyncResource>
            </ResourceContent>
            <LoadingText>Loading timesheet...</LoadingText>
            <ErrorText>Loading timesheet failed!</ErrorText>
        </AsyncResource>
    </Main>
</MainTemplate>

@code {
    Timesheet? timesheet;
    AsyncResourceState loadingState;
    AsyncButtonState savingState;
    AsyncButtonState deletingState;
    AsyncButtonState addingSessionState;
    AsyncButtonState savingSessionState;
    AsyncButtonState deletingSessionState;
    AsyncButtonState creatingBillState;
    AsyncButtonState deletingBillState;
    bool disableButtons =>
    savingState.Merge(deletingState).Merge(addingSessionState).Merge(savingSessionState).Merge(deletingSessionState) is
    not AsyncButtonState.Ready || loadingState is not AsyncResourceState.Success;
    IEnumerable<Bill> Bills => Enumerable.Empty<Bill>().Append(timesheet!.Bill!).Where(b => b is not null);

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingState = AsyncResourceState.Loading;

        try
        {
            timesheet = await http.GetFromJsonAsync<Timesheet>($"api/Timesheet/{id}", JSON_OPTIONS);
            loadingState = AsyncResourceState.Success;
        }
        catch
        {
            loadingState = AsyncResourceState.Error;
        }
    }

    async Task Save()
    {
        savingState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Timesheet/{id}", timesheet, JSON_OPTIONS);
        }
        catch
        {
            savingState = AsyncButtonState.Error;
        }

        Back();
    }

    async Task Delete()
    {
        deletingState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Timesheet/{id}");
        }
        catch
        {
            deletingState = AsyncButtonState.Error;
        }

        Back();
    }

    async Task AddSession()
    {
        addingSessionState = AsyncButtonState.Loading;

        try
        {
            var res = await http.PostAsJsonAsync("api/Session", new Session { TimesheetId = timesheet!.Id });
            var session = await res.Content.ReadFromJsonAsync<Session>();
            nav.NavigateTo($"sessions/{session!.Id}");
        }
        catch
        {
            addingSessionState = AsyncButtonState.Error;
        }
    }

    async Task CreateBill()
    {
        creatingBillState = AsyncButtonState.Loading;

        try
        {
            await http.PostAsJsonAsync("api/Bill", new Bill { TimesheetId = timesheet!.Id });
            creatingBillState = AsyncButtonState.Ready;
            await OnInitializedAsync();
        }
        catch
        {
            creatingBillState = AsyncButtonState.Error;
        }
    }

    async Task DeleteBill()
    {
        deletingBillState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Bill/{timesheet!.Id}");
            deletingBillState = AsyncButtonState.Ready;
            await OnInitializedAsync();
        }
        catch
        {
            deletingBillState = AsyncButtonState.Error;
        }
    }

    void Cancel()
    {
        Back();
    }

    void Back() => nav.NavigateTo($"projects/{timesheet?.ProjectId}");
}
