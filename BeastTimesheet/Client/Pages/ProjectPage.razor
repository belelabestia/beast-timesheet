@using BeastTimesheet.Shared.Model
@using BeastTimesheet.DesignSystem
@using static BeastTimesheet.Shared.Config
@page "/projects/{id:int}"
@inject HttpClient http
@inject NavigationManager nav

<PageTitle>Project</PageTitle>

<MainTemplate>
    <Header>
        <AsyncResource State="loadingState">
            <ResourceContent>
                #@(id + " - " + (project?.Name is null or "" ? "Draft" : project!.Name))
            </ResourceContent>
            <LoadingText>...</LoadingText>
            <ErrorText>Ops!</ErrorText>
        </AsyncResource>
    </Header>
    <Actions>
        <AsyncButton OnClick="Save" State="savingState" Disabled="disableButtons">
            <ButtonText>Save</ButtonText>
            <LoadingText>Saving...</LoadingText>
            <ErrorText>Saving failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="Delete" State="deletingState" Disabled="disableButtons">
            <ButtonText>Delete</ButtonText>
            <LoadingText>Deleting...</LoadingText>
            <ErrorText>Deleting failed!</ErrorText>
        </AsyncButton>
        <AsyncButton OnClick="CreateTimesheet" State="creatingTimesheetState" Disabled="disableButtons">
            <ButtonText>Create timesheet</ButtonText>
            <LoadingText>Creating timesheet...</LoadingText>
            <ErrorText>Creating timesheet failed!</ErrorText>
        </AsyncButton>
        <button @onclick="Cancel" disabled="@disableButtons">Cancel</button>
    </Actions>
    <Links>
        <NavLink href="projects">Projects</NavLink>
    </Links>
    <Main>
        <AsyncResource State="loadingState">
            <ResourceContent>
                <h2 class="pad center">Project data</h2>
                <div class="flex column gap">
                    <label for="name">Name</label>
                    <input id="name" @bind="project!.Name">
                    <label for="hourly-fee">Hourly fee</label>
                    <input id="hourly-fee" @bind="project.HourlyFee">
                </div>
                <h2 class="center pad">Timesheets</h2>
                <ListView Items="project.Timesheets" Context="timesheet">
                    <ItemTemplate>
                        <NavLink href="@($"timesheets/{timesheet.Id}")">#@timesheet.Id - @(timesheet.Name is "" ?
                            "Draft" : timesheet.Name)</NavLink>
                        </ItemTemplate>
                        <EmptyContent>
                            <p>Nothing to show here.</p>
                            <AsyncButton OnClick="CreateTimesheet" State="creatingTimesheetState" Disabled="disableButtons">
                                <ButtonText>Create timesheet</ButtonText>
                                <LoadingText>Creating timesheet...</LoadingText>
                                <ErrorText>Creating timesheet failed!</ErrorText>
                            </AsyncButton>
                        </EmptyContent>
                    </ListView>
                </ResourceContent>
                <LoadingText>Loading project...</LoadingText>
                <ErrorText>Loading project failed!</ErrorText>
            </AsyncResource>
        </Main>
    </MainTemplate>

    @code {
    Project? project;
    AsyncResourceState loadingState;
    AsyncButtonState savingState;
    AsyncButtonState deletingState;
    AsyncButtonState creatingTimesheetState;
    bool disableButtons =>
    savingState.Merge(deletingState).Merge(creatingTimesheetState) is not AsyncButtonState.Ready ||
    loadingState is not AsyncResourceState.Success;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            project = await http.GetFromJsonAsync<Project>($"api/Project/{id}", JSON_OPTIONS);
            loadingState = AsyncResourceState.Success;
        }
        catch
        {
            loadingState = AsyncResourceState.Error;
        }
    }

    async Task Save()
    {
        savingState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Project/{id}", project, JSON_OPTIONS);
        }
        catch
        {
            savingState = AsyncButtonState.Error;
        }

        Back();
    }

    async Task Delete()
    {
        deletingState = AsyncButtonState.Loading;

        try
        {
            await http.DeleteAsync($"api/Project/{id}");
        }
        catch
        {
            deletingState = AsyncButtonState.Error;
        }

        Back();
    }

    void Cancel()
    {
        Back();
    }

    async Task CreateTimesheet()
    {
        creatingTimesheetState = AsyncButtonState.Loading;

        try
        {
            await http.PutAsJsonAsync($"api/Project/{id}", project, JSON_OPTIONS);
            var res = await http.PostAsJsonAsync("api/Timesheet", new Timesheet { ProjectId = project!.Id });
            var timesheet = await res.Content.ReadFromJsonAsync<Timesheet>();
            nav.NavigateTo($"timesheets/{timesheet!.Id}");
        }
        catch
        {
            creatingTimesheetState = AsyncButtonState.Error;
        }
    }

    void Back() => nav.NavigateTo("projects");
}

