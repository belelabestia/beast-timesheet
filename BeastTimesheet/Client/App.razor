@inject Auth auth
@inject HttpClient http

@if (auth.Key == null)
{
    <p>Insert key</p>
    <input @oninput="OnInput">
    <button @onclick="OnConfirm">Confirm</button>
}
else
{
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}

@code {
    string? input;

    protected override void OnInitialized()
    {
        auth.OnChange += StateHasChanged;
    }

    void OnInput(ChangeEventArgs eventArgs)
    {
        input = eventArgs.Value as string;
    }

    async Task OnConfirm(MouseEventArgs eventArgs)
    {
        try
        {
            http.DefaultRequestHeaders.Remove("Key");
            http.DefaultRequestHeaders.Add("Key", input);

            var res = await http.GetAsync("api/Auth");

            if (res.StatusCode == System.Net.HttpStatusCode.OK)
            {
                auth.Key = input;
            }
        }
        catch { }
    }
}

